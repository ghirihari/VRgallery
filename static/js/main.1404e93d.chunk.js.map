{"version":3,"sources":["Components/VRComponents/AssetsLoader.js","Components/VRComponents/VRViewer.js","Components/Slider.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["AssetsLoader","props","assets","data","map","value","index","crossOrigin","id","name","src","url","alt","key","hotspotIcon","VRViewer","state","loaded","change","bind","loadLinks","str","this","changeImage","links","Object","values","image","item","splitrot","position","split","x","parseFloat","z","scale","look-at","onClick","e","target","Segment","cursor","look-controls","React","Component","Slider","images","Menu","Item","as","className","thumbnail","toUpperCase","Home","visible","current_image","require","sideBarToggle","hideSideBar","setState","style","height","Sidebar","Pushable","animation","icon","inverted","direction","vertical","Pusher","faBars","color","size","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1404e93d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AssetsLoader(props){\r\n  \r\n    // Load Assets        \r\n    let assets = props.data.map((value,index) => {\r\n    return(\r\n        <img crossOrigin=\"anonymous\" id={value.name} src={value.url} alt={value.name} key={index}/>\r\n    )});\r\n    \r\n    // Load Hotspot Icon\r\n    let hotspotIcon = <img \r\n        id=\"hotspot\" \r\n        crossOrigin=\"anonymous\"\r\n        src=\"https://cdn.glitch.com/a04a26d3-92af-4a88-9d49-8fcc2c5344a5%2Fhotspots.png?v=1562761623319\"\r\n        alt=\"Hotspot\"/>\r\n    \r\n    return(\r\n        <a-assets>\r\n            {assets}\r\n            {hotspotIcon}\r\n        </a-assets>\r\n    )\r\n    }\r\n\r\nexport default AssetsLoader;\r\n","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react'\r\nimport 'aframe';\r\nimport 'aframe-look-at-component';\r\n// import 'aframe-mouse-cursor-component';\r\n\r\nimport AssestsLoader from \"./AssetsLoader\";\r\n\r\n\r\nclass VRViewer extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n      this.state = {\r\n        loaded:false\r\n    };\r\n       \r\n    this.change = this.change.bind(this);\r\n    this.loadLinks = this.loadLinks.bind(this);\r\n    \r\n  }\r\n\r\n  change(str){\r\n    this.props.data.map((value,index) => {\r\n      if(value.name === str)\r\n      {this.props.changeImage(value)}\r\n    });\r\n  }\r\n  \r\n  loadLinks()\r\n  {\r\n    this.links = Object.values(this.props.image.links).map(item => \r\n    {\r\n      var splitrot=item.position.split(\" \");\r\n      var x= parseFloat(splitrot[0]*120);\r\n      // var y= parseFloat(splitrot[1]*80);\r\n      var z= parseFloat(splitrot[2]*120);\r\n      \r\n      return(\r\n        <a-image\r\n          id={item.name} key={item.name} src=\"#hotspot\"\r\n          position={x+\" -8 \"+z} scale=\"10 10\"\r\n          look-at='[camera]' onClick={(e) => this.change(e.target.id)}\r\n        >\r\n        </a-image>\r\n      ) \r\n    })\r\n    // console.log(this.links);\r\n  }\r\n  \r\n  render()\r\n    { \r\n    this.loadLinks();\r\n    \r\n    return (\r\n      <Segment>\r\n        <a-scene \r\n          cursor=\"rayOrigin: mouse\"   \r\n          look-controls=\"gyroEnabled: false;\"\r\n        >\r\n            <AssestsLoader data = {this.props.data}/>\r\n            <a-sky src= {'#'+this.props.image.name} />\r\n            {this.links}\r\n            {/* <a-camera id=\"cam1\" look-controls=\"gyroEnabled: false;\" >\r\n              <a-cursor></a-cursor>\r\n            </a-camera> */}\r\n            {/* <a-entity id=\"cam1\" camera cursor=\"rayOrigin: mouse\"></a-entity> */}\r\n         \r\n        </a-scene>\r\n      </Segment>\r\n    );\r\n    }\r\n}\r\n  \r\n  export default VRViewer;\r\n","import React from 'react';\r\nimport { Menu } from 'semantic-ui-react'\r\n\r\nimport '../Styles/Slider.css';\r\n\r\nclass Slider extends React.Component {\r\n  \r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                {this.props.images.map((value,index) => {\r\n                    return(\r\n                    <Menu.Item as='a' onClick={() => this.props.changeImage(value)} key={index}>\r\n                    <div className=\"thumbnail\">\r\n                        <img src={value.thumbnail} alt={value.name} className=\"thumbnailImg\"/>\r\n                    <div className=\"centered\">{value.name.toUpperCase()}</div>\r\n                    </div>\r\n                    </Menu.Item>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n        \r\n          \r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react'\r\n\r\nimport { Menu, Segment, Sidebar } from 'semantic-ui-react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport VRViewer from './VRComponents/VRViewer'\r\nimport Slider from './Slider'\r\nimport '../Styles/Home.css';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: false,\r\n            current_image: {\r\n                    \"info\" : {\r\n                        \"About Innov8\" : {\r\n                            \"Description\" : \"Innov8 Coworking offers beautifully crafted workspaces where people can create, connect, and grow their businesses at prime locations in multiple cities pan-India. Innov8 hosts people from diverse backgrounds such as digital nomads, entrepreneurs, freelancers, corporates employees and startup enthusiasts.\",\r\n                            \"buyurl\" : \"\",\r\n                            \"info3diosurl\" : \"\",\r\n                            \"info3durl\" : \"\",\r\n                            \"infoimgurl\" : \"\",\r\n                            \"knowurl\" : \"\",\r\n                            \"position\" : \"-0.8980867539712181 0.00034748211845683774 0.4203239232941025\",\r\n                            \"vidurl\" : \"https://www.youtube.com/embed/0UA80LzjJh0\"\r\n                            }\r\n                    },\r\n                    \"links\" : {\r\n                        \"theatere\" : {\r\n                        \"name\" : \"Theatre\",\r\n                        \"dest-image\" : \"https://firebasestorage.googleapis.com/v0/b/realvr-eb62c.appspot.com/o/iHwPWJvWDQYW6ilIAfNfgupytcb2%2FInnov8%2F1579863181062-20200124_161208_885.jpg?alt=media&token=dc168d99-2e45-4758-b0fb-c41b356eb675\",\r\n                        \"dest-thumb\" : \"https://firebasestorage.googleapis.com/v0/b/realvr-eb62c.appspot.com/o/iHwPWJvWDQYW6ilIAfNfgupytcb2%2FInnov8%2Fthumbs%2F1579863191216-20200124_161208_885.jpg?alt=media&token=bbffb628-3d4e-4369-8571-a0af07abb52b\",\r\n                        \"position\" : \"0.8826060510846503 -0.08739164477592737 -0.48291200668298667\"\r\n                    }\r\n                },\r\n                    \"name\" : \"Entrance\",\r\n                    \"thumbnail\" : \"https://firebasestorage.googleapis.com/v0/b/realvr-eb62c.appspot.com/o/iHwPWJvWDQYW6ilIAfNfgupytcb2%2FInnov8%2Fthumbs%2F1579863216723-20200124_161250_786.jpg?alt=media&token=95e7d027-8490-4cf5-9679-0d5b7404ce14\",\r\n                    \"url\" : \"https://firebasestorage.googleapis.com/v0/b/realvr-eb62c.appspot.com/o/iHwPWJvWDQYW6ilIAfNfgupytcb2%2FInnov8%2F1579863210017-20200124_161250_786.jpg?alt=media&token=3311ca91-4238-4b73-b75a-dfc37fdc6d24\"\r\n                    }\r\n        }\r\n        \r\n        this.data = require('../Data/data.json');\r\n        this.images = Object.values(this.data.images);   \r\n        this.sideBarToggle = this.sideBarToggle.bind(this);\r\n        this.hideSideBar = this.hideSideBar.bind(this);\r\n        this.changeImage = this.changeImage.bind(this);\r\n    }\r\n\r\n\r\n    sideBarToggle() {\r\n        this.setState(state => ({visible: !state.visible}));\r\n        // console.log('Toggled')\r\n    }\r\n\r\n    hideSideBar() {\r\n        if(this.state.visible){\r\n            this.setState({visible: false});\r\n            // console.log('Hided');\r\n        }\r\n    }\r\n\r\n    changeImage(str){\r\n        // console.log(str);\r\n        this.setState({current_image:str})\r\n        this.hideSideBar();\r\n    }\r\n\r\n    \r\n    \r\n    render()\r\n    {\r\n    return (\r\n        <div style={{height: '100vh'}} >\r\n            \r\n            <Sidebar.Pushable as={Segment}>\r\n                <Sidebar as={Menu} animation='overlay'icon='labeled' inverted direction='right' vertical visible={this.state.visible}> \r\n                    {/* SLIDER COMPONENT */}\r\n                    <Slider changeImage={this.changeImage.bind(this)} images = {this.images}/>\r\n                </Sidebar>\r\n\r\n                <Sidebar.Pusher onClick={this.hideSideBar}>\r\n                    {/* 360 IMAGE COMPONENT */}\r\n                    <VRViewer \r\n                        data={this.images} \r\n                        image={this.state.current_image}\r\n                        changeImage={this.changeImage.bind(this)}\r\n                    />\r\n                </Sidebar.Pusher>\r\n            </Sidebar.Pushable>\r\n\r\n            {/* SIDEBAR TOGGLER */}\r\n            {!this.state.visible &&\r\n            <div className=\"top-right btn\" onClick={this.sideBarToggle}>\r\n                <FontAwesomeIcon icon={faBars} color=\"white\" size=\"2x\"/>\r\n            </div>\r\n            }\r\n\r\n            {/* IMAGE LABEL */}\r\n            <div className=\"top-left label\">\r\n                {this.state.current_image.name}\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport Home from './Components/Home.js';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}